{"version":3,"sources":["undraw_empty_xct9.svg","pages/ManageModels/ManageModelModal.jsx","pages/ManageModels/ManageModelsPage.jsx","pages/InventoryProfile/InventorylProfileModal.jsx","pages/InventoryProfile/InventoryProfilePage.jsx","pages/indexRouter.jsx","components/Sidebar/SidebarComponent.jsx","App.js","redux/reducers/ModelReducer.js","redux/reducers/InventoryReducers.js","redux/reducers/SideMenuReducer.js","redux/reducers/RootReducers.js","redux/store.js","localStorage.js","serviceWorker.js","index.js"],"names":["module","exports","ManageModelModal","props","dispatch","useDispatch","newInventoryId","useSelector","state","models","length","useState","isShowModal","setIsShowModal","Modal","trigger","Button","onClick","Icon","name","data","Responsive","minWidth","style","display","open","closeIcon","onClose","Header","enableReinitialize","initialValues","title","description","fields","onSubmit","values","type","payload","inventoryId","handleChange","touched","errors","dirty","isSubmitting","setFieldValue","handleSubmit","handleBlur","handleReset","Content","Form","disabled","border","Description","Field","Input","placeholder","value","onChange","fieldArrayRenderProps","insert","dataType","fluid","map","item","index","Segment","key","justifyContent","remove","Select","event","options","text","renderFormArray","Actions","marginTop","ManageModelsPage","Container","margin","paddingRight","window","innerWidth","as","attached","maxWidth","size","floated","Table","singleLine","Row","HeaderCell","Body","Cell","moment","creationDate","format","InventoryProfileModal","currentModel","setCurrentModel","useEffect","modelData","find","parseInt","isModeEdit","isNaN","inventoryModelIndex","inventoryModelData","InventoryProfilePage","inventories","setData","inventoryData","match","params","id","field","inventory","Grid","centered","columns","Image","src","EmptySvg","IndexRouter","path","component","from","to","Nav","exact","activeClassName","SidebarComponent","toggleSideBar","className","Menu","vertical","tabular","icon","textAlign","padding","circular","Item","App","isShowSideBar","sideMenuBar","isShowSideNenuBar","Column","width","paddingBottom","stretched","position","top","left","zIndex","transition","overflow","initialState","Date","action","push","currentInventoryAddIndex","findIndex","unshift","currentInventoryUpdateIndex","currentInventoryDeleteIndex","splice","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","rootReducers","subscribe","stringify","setItem","saveState","getState","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb025418.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_empty_xct9.fcc453b4.svg\";","import React, { useState } from 'react';\nimport { Button, Icon, Modal, Input, Form, Select, Segment, Responsive } from 'semantic-ui-react';\nimport { Formik, FieldArray } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ManageModelModal = (props) => {\n\n    const dispatch = useDispatch();\n    const newInventoryId = useSelector(state => state.models.length);\n\n    const [isShowModal, setIsShowModal] = useState();\n\n    const renderFormArray = ({ values, handleChange, setFieldValue }, fieldArrayRenderProps) => {\n        return <>\n            <Button type=\"button\" onClick={() => {\n                fieldArrayRenderProps.insert(0, {\n                    name: '',\n                    description: '',\n                    dataType: ''\n                });\n            }} fluid>\n                <Icon name=\"add\" />\n                    Add Field\n                </Button>\n            {\n                values.fields && values.fields.map((item, index) => (\n                    <Segment key={index}>\n                        <div >\n                            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                                <h3>Field {index + 1}</h3>\n                                <Button onClick={() => fieldArrayRenderProps.remove(index)}>\n                                    Remove\n                            </Button>\n                            </div>\n\n                            <Form.Field>\n                                <label>Name</label>\n                                <Input\n                                    name={`fields.${index}.name`}\n                                    placeholder=\"Name\"\n                                    value={values.fields[index].name}\n                                    onChange={handleChange}\n                                />\n                            </Form.Field>\n\n                            <Form.Field>\n                                <label>Description</label>\n                                <Input\n                                    name={`fields.${index}.description`}\n                                    placeholder=\"Description\"\n                                    value={values.fields[index].description}\n                                    onChange={handleChange}\n                                />\n                            </Form.Field>\n\n                            <Form.Field>\n                                <label>Data Type</label>\n                                <Select\n                                    name={`fields.${index}.dataType`}\n                                    onChange={(value, event) => setFieldValue(`fields.${index}.dataType`, event.value)}\n                                    placeholder='Select DataType'\n                                    value={values.fields[index].dataType}\n                                    options={[\n                                        {\n                                            key: 'text',\n                                            value: 'text',\n                                            text: 'Text'\n                                        },\n                                        {\n                                            key: 'number',\n                                            value: 'number',\n                                            text: 'Number'\n                                        },\n                                        {\n                                            key: 'date',\n                                            value: 'date',\n                                            text: 'date'\n                                        }\n                                    ]}\n                                />\n                            </Form.Field>\n                        </div>\n                    </Segment>\n                ))\n            }\n        </>\n    }\n\n    return <Modal\n            trigger={<Button \n                onClick={() => setIsShowModal(true)}>\n                    <Icon name={props.data ? `eye` : `add`} />\n                    <Responsive minWidth={768} style={{ display: 'inline-block' }}>\n                        {props.data ? `View` : `Add`}\n                    </Responsive>\n                </Button>}\n            open={isShowModal}\n            closeIcon\n            onClose={() => setIsShowModal(false)}\n        >\n        <Modal.Header>Model</Modal.Header>\n        <Formik\n            enableReinitialize\n            initialValues={props.data || {\n                title: '',\n                description: '',\n                fields: []\n            }}\n\n            onSubmit={(values) => {\n                dispatch({ type: \"ADD_MODEL\", payload: values });\n                dispatch({\n                    type: \"ADD_INVENTORY\", payload: {\n                        inventoryId: newInventoryId,\n                        data: []\n                    }\n                });\n                setIsShowModal(false);\n            }}\n        >\n            {\n                ({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    setFieldValue,\n                    handleBlur,\n                    handleSubmit,\n                    handleReset\n                }) =>\n                    (<>\n                        <Modal.Content>\n                            <Form onSubmit={handleSubmit}>\n                                <fieldset disabled={props.data} style={{ border: 0 }}>\n                                    <Modal.Description>\n                                        <Form.Field>\n                                            <label>Name</label>\n                                            <Input\n                                                name=\"name\"\n                                                placeholder=\"Name\"\n                                                value={values.name}\n                                                onChange={handleChange}\n                                            />\n                                        </Form.Field>\n\n                                        <Form.Field>\n                                            <label>Description</label>\n                                            <Input\n                                                name=\"description\"\n                                                placeholder=\"Description\"\n                                                value={values.description}\n                                                onChange={handleChange}\n                                            />\n                                        </Form.Field>\n\n                                        <FieldArray name=\"fields\">\n                                            {(fieldArrayRenderProps) => renderFormArray({ values, handleChange, setFieldValue }, fieldArrayRenderProps)}\n                                        </FieldArray>\n                                    </Modal.Description>\n                                    <Modal.Actions style={{ marginTop: 10 }}>\n                                        <Form.Button fluid type=\"submit\" disabled={false}>\n                                            Proceed <Icon name=\"chevron right\" />\n                                        </Form.Button>\n                                    </Modal.Actions>\n                                </fieldset>\n                            </Form>\n                        </Modal.Content>\n                    </>)\n            }\n        </Formik>\n    </Modal>\n\n}\n\nexport default ManageModelModal;","import React from 'react';\nimport moment from 'moment';\nimport { Header, Container, Table, Segment, Button, Icon, Responsive } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ManageModelModal from './ManageModelModal';\n\n\nconst ManageModelsPage = () => {\n\n    const dispatch = useDispatch();\n\n    const models = useSelector(state => state.models);\n\n    return <Container style={{ margin: 20, paddingRight: window.innerWidth > 768 ? 20 : 0 }}>\n        <Header as=\"h2\" attached=\"top\" style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Responsive maxWidth={768}>\n                <Button size=\"small\" onClick={() => dispatch({ type: 'TOGGLE_SIDEBAR', payload: true })}>\n                    <Icon name=\"align left\" />\n                </Button>\n            </Responsive>\n            Manage Models\n            <div floated=\"right\">\n                <ManageModelModal />\n            </div>\n        </Header>\n\n        <Segment>\n            <Table singleLine>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Creation Date</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        models && models.length > 0 && models.map((item, index) => (\n                            <Table.Row key={index}>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{moment(item.creationDate).format('lll')}</Table.Cell>\n                                <Table.Cell>\n                                    <ManageModelModal data={item} />\n                                </Table.Cell>\n                            </Table.Row>\n                        ))\n                    }\n                </Table.Body>\n            </Table>\n        </Segment>\n    </Container>\n}\n\nexport default ManageModelsPage;\n","import React, { useState, useEffect } from 'react';\nimport { Button,  Icon,  Modal, Input, Form,  Segment, Responsive } from 'semantic-ui-react';\nimport { Formik, FieldArray } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst InventoryProfileModal = (props) => {\n\n    const dispatch = useDispatch(); \n\n    const models = useSelector(state => state.models);\n\n    const [currentModel, setCurrentModel] = useState([]);\n    const [isShowModal, setIsShowModal] = useState();\n\n    useEffect(() => {\n        if (models) {\n            const modelData = models.find(item => parseInt(item.inventoryId) === parseInt(props.inventoryId));\n            setCurrentModel(modelData);\n        }\n    }, [models, props.inventoryId]);\n\n    const renderFormArray = ({ values, handleChange }, fieldArrayRenderProps) => {\n        return <>\n            {\n                values.fields && values.fields.map((item, index) => (\n                    <Segment key={index}>\n                        <div >\n                            <Form.Field>\n                                <label>{currentModel.fields[index].name}</label>\n                                <Input\n                                    type={values.fields[index].dataType}\n                                    name={`fields.${index}.value`}\n                                    placeholder='Name'\n                                    value={values.fields[index].value}\n                                    onChange={handleChange}\n                                />\n                            </Form.Field>\n\n                        </div>\n                    </Segment>\n                ))\n            }\n        </>\n    }\n\n    const isModeEdit = !isNaN(props.inventoryModelIndex)\n\n    return <Modal \n                trigger={<Button \n                    onClick={() => setIsShowModal(true)}>\n                        <Icon name={isModeEdit ? `pencil alternate` : `add`} />\n                        <Responsive minWidth={768} style={{ display: 'inline-block' }}>\n                            {isModeEdit ? 'Edit': 'Add'}\n                        </Responsive>\n                    </Button>}\n                open={isShowModal}\n                onClose={() => setIsShowModal(false)}\n                closeIcon\n            >\n        <Modal.Header>{isModeEdit ? 'Edit': 'Add'} {currentModel.name}</Modal.Header>\n        <Formik\n            enableReinitialize\n            initialValues={{\n                fields: isModeEdit ? props.inventoryModelData  : currentModel.fields\n            }}\n\n            onSubmit={(values) => {\n                const {inventoryId, inventoryModelIndex } = props;\n                if (isModeEdit) {\n                    dispatch({ type: \"UPDATE_INVENTORY_BY_ID\", payload: { values: values.fields, inventoryId, inventoryModelIndex} });\n                } else {\n                    dispatch({ type: \"ADD_INVENTORY_BY_ID\", payload: { values: values.fields, inventoryId } });\n                }\n                setIsShowModal(false);\n            }}\n        >\n            {\n                ({\n                    values,\n                    touched,\n                    errors,\n                    dirty,\n                    isSubmitting,\n                    handleChange,\n                    setFieldValue,\n                    handleBlur,\n                    handleSubmit,\n                    handleReset\n                }) =>\n                    (<>\n                        <Modal.Content>\n                            <Form onSubmit={handleSubmit}>\n                                <Modal.Description>\n                                    <FieldArray name=\"fields\">\n                                        {(fieldArrayRenderProps) => renderFormArray({ values, handleChange, setFieldValue }, fieldArrayRenderProps)}\n                                    </FieldArray>\n                                </Modal.Description>\n                                <Modal.Actions>\n                                    <Form.Button fluid type=\"submit\" disabled={false}>\n                                        Proceed <Icon name=\"chevron right\" />\n                                    </Form.Button>\n                                </Modal.Actions>\n                            </Form>\n                        </Modal.Content>\n                    </>)\n            }\n        </Formik>\n    </Modal>\n\n}\n\nexport default InventoryProfileModal;","import React, { useState, useEffect, Fragment } from 'react';\nimport moment from 'moment';\nimport { Header, Button, Container, Table, Segment, Icon, Image, Grid, Responsive } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport InventoryProfileModal from './InventorylProfileModal';\nimport EmptySvg from '../../undraw_empty_xct9.svg';\n\n\nconst InventoryProfilePage = (props) => {\n\n    const dispatch = useDispatch();\n\n    const models = useSelector(state => state.models);\n    const inventories = useSelector(state => state.inventories);\n\n    const [data, setData] = useState();\n    const [currentModel, setCurrentModel] = useState([]);\n\n    useEffect(() => {\n        if (inventories) {\n            const inventoryData = inventories.find(item => parseInt(item.inventoryId) === parseInt(props.match.params.id));\n            setData(inventoryData.data);\n        }\n\n        if (models) {\n            const modelData = models.find(item => parseInt(item.inventoryId) === parseInt(props.match.params.id));\n            setCurrentModel(modelData);\n        }\n\n    }, [props.match.params.id, inventories, models]);\n\n    return <Container style={{ margin: 20, paddingRight: window.innerWidth > 768 ? 20 : 0 }}>\n        <Header as=\"h2\" attached=\"top\" style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Responsive maxWidth={768}>\n                <Button size=\"small\" onClick={() => dispatch({ type: 'TOGGLE_SIDEBAR', payload: true })}>\n                    <Icon name=\"align left\" />\n                </Button>\n            </Responsive>\n            {currentModel.name}\n            <div floated=\"right\">\n                <InventoryProfileModal inventoryId={props.match.params.id} />\n            </div>\n        </Header>\n\n        <Segment>\n            <Table singleLine>\n                <Table.Header>\n                    <Table.Row>\n                        {\n                            currentModel && currentModel.fields && currentModel.fields.length > 0 && currentModel.fields.map((field, index) => (\n                                <Table.HeaderCell key={index}>{field.name}</Table.HeaderCell>\n                            ))\n                        }\n                        <Table.HeaderCell>\n                            Actions\n                        </Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        data && data.length > 0 && data.map((inventory, index) => (\n                            <Table.Row key={index}>\n                                {\n                                    inventory && inventory.length > 0 && inventory.map((field, index) => (\n                                        <Fragment key={index}>\n                                            <Table.Cell>{typeof field.value === \"object\" ? moment(field.value).format('lll') : field.value}</Table.Cell>\n                                        </Fragment>\n                                    ))\n                                }\n                                <Table.Cell>\n                                    <InventoryProfileModal inventoryId={props.match.params.id} inventoryModelIndex={index} inventoryModelData={inventory} />\n                                    <Button onClick={() => dispatch({\n                                        type: \"DELETE_INVENTORY_BY_ID_FROM_INDEX\", payload: {\n                                            inventoryId: props.match.params.id,\n                                            inventoryModelIndex: index\n                                        }\n                                    })}>\n                                        <Icon name=\"delete\" />\n                                        <Responsive minWidth={768} style={{ display: 'inline-block' }}>\n                                            Delete\n                                        </Responsive>\n                                    </Button>\n                                </Table.Cell>\n                            </Table.Row>\n                        ))\n                    }\n\n                </Table.Body>\n            </Table>\n        </Segment>\n\n        {\n            data && data.length === 0 &&\n            <Segment size=\"massive\">\n                <Grid centered columns=\"1\">\n                    <Image size=\"large\" src={EmptySvg} />\n                </Grid>\n            </Segment>\n        }\n    </Container>\n}\n\nexport default InventoryProfilePage;\n","import React from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport ManageModelsPage from './ManageModels/ManageModelsPage';\nimport InventoryProfilePage from './InventoryProfile/InventoryProfilePage';\n\nconst IndexRouter = () => (\n    <Switch>\n        <Route path=\"/manage-models\" component={ManageModelsPage} />\n        <Route path=\"/inventory-profile/:id\" component={InventoryProfilePage} />\n        <Redirect from='*' to='/manage-models' />\n    </Switch>\n);\n\nexport default IndexRouter;","import React from 'react';\nimport { Header, Icon, Menu, } from 'semantic-ui-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport './Sidebar.css';\n\nconst Nav = props => (\n    <NavLink\n        exact\n        {...props}\n        activeClassName=\"active\"\n    />\n);\n\nconst SidebarComponent = () => {\n\n    const dispatch = useDispatch();\n\n    const models = useSelector(state => state.models);\n\n    const toggleSideBar = () => {\n        if (window.innerWidth <= 768) {\n            dispatch({ type: 'TOGGLE_SIDEBAR', payload: false })\n        }\n    }\n\n    return (\n        <div className=\"side-bar\">\n            <Menu fluid vertical tabular>\n                <Header icon textAlign=\"center\" style={{ padding: 20 }}>\n                    <Icon name=\"settings\" circular />\n                    <p>Construction Machine Management Inc</p>\n                </Header>\n                <Menu.Item\n                    to=\"/manage-models\"\n                    as={Nav}\n                    name=\"Manage Models\"\n                    onClick={toggleSideBar}\n                />\n                <div>\n                    {\n                        models && models.length > 0 && models.map((item, index) => (\n                            <Menu.Item\n                                as={Nav}\n                                key={item.inventoryId}\n                                name={item.name}\n                                onClick={toggleSideBar}\n                                to={`/inventory-profile/${item.inventoryId}`}\n                            />\n                        ))\n                    }\n                </div>\n            </Menu>\n        </div>\n    )\n}\n\nexport default SidebarComponent;","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Grid, Responsive } from 'semantic-ui-react';\nimport IndexRouter from './pages/indexRouter';\nimport SidebarComponent from './components/Sidebar/SidebarComponent';\nimport { useSelector } from 'react-redux';\nimport './App.css';\n\nfunction App() {\n\n\tconst isShowSideBar = useSelector(state => state.sideMenuBar.isShowSideNenuBar);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router>\n\t\t\t\t<Responsive minWidth={768}>\n\t\t\t\t\t<Grid>\n\t\t\t\t\t\t<Grid.Column width={4} style={{ paddingBottom: 0 }}>\n\t\t\t\t\t\t\t<SidebarComponent />\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t<Grid.Column stretched width={12}>\n\t\t\t\t\t\t\t<IndexRouter />\n\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Responsive>\n\t\t\t\t<Responsive maxWidth={768}>\n\t\t\t\t\t<div style={{ position: 'absolute', top: 0, left: 0, zIndex: 1, transition: 'all 0.3s ease-in-out', width: isShowSideBar ? '100%' : 0, overflow: 'hidden', }}>\n\t\t\t\t\t\t<SidebarComponent />\n\t\t\t\t\t</div>\n\t\t\t\t\t<IndexRouter />\n\t\t\t\t</Responsive>\n\n\t\t\t</Router>\n\t\t</div >\n\t);\n}\n\nexport default App;\n","const initialState = [{\n    name: 'Chainsaw',\n    description: 'Some description',\n    creationDate: new Date(),\n    inventoryId: 0,\n    fields: [\n        {\n            name: 'Model Number',\n            description: 'To vweify model number',\n            dataType: 'text'\n        },\n        {\n            name: 'Build Number',\n            description: 'To vweify build number',\n            dataType: 'text'\n        }\n    ]\n}, {\n    name: 'BullDozer',\n    description: 'Some description',\n    creationDate: new Date(),\n    inventoryId: 1,\n    fields: [\n        {\n            \"name\": \"Orientation\",\n            \"dataType\": \"text\",\n            \"value\": \"hello\"\n          },\n          {\n              \"name\": \"Height\",\n              \"dataType\": \"text\",\n              \"value\": \"hello2\"\n          }\n    ]\n}];\n\nconst models = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD_MODEL\":\n            state.push({\n                inventoryId: state.length,\n                creationDate: new Date(),\n                ...action.payload\n            });\n            return [...state];\n        default:\n            return state;\n    }\n}\n\nexport default models;","const initialState = [{\n    inventoryId: 0,\n    data: [\n        [\n            {\n              \"name\": \"modelNumber\",\n              \"dataType\": \"text\",\n              \"value\": \"hello\"\n            },\n            {\n                \"name\": \"modelNumber\",\n                \"dataType\": \"text\",\n                \"value\": \"hello2\"\n            }\n        ]\n    ],\n},{\n    inventoryId: 1,\n    data: [\n        [\n            {\n                \"name\": \"Orientation\",\n                \"dataType\": \"text\",\n                \"value\": \"hello\"\n              },\n              {\n                  \"name\": \"Height\",\n                  \"dataType\": \"text\",\n                  \"value\": \"hello2\"\n              }\n        ]\n    ],\n}];\n\nconst inventories = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD_INVENTORY\":\n            state.push(action.payload);\n            return [...state];\n        case \"ADD_INVENTORY_BY_ID\":\n            const currentInventoryAddIndex = state.findIndex(inventory => parseInt(inventory.inventoryId) === parseInt(action.payload.inventoryId));\n            state[currentInventoryAddIndex].data.unshift(action.payload.values);\n            return [...state];\n        case \"UPDATE_INVENTORY_BY_ID\":\n            const currentInventoryUpdateIndex = state.findIndex(inventory => parseInt(inventory.inventoryId) === parseInt(action.payload.inventoryId));\n            state[currentInventoryUpdateIndex].data[action.payload.inventoryModelIndex] = action.payload.values;\n            return [...state];\n        case \"DELETE_INVENTORY_BY_ID_FROM_INDEX\":\n            const currentInventoryDeleteIndex = state.findIndex(inventory => parseInt(inventory.inventoryId) === parseInt(action.payload.inventoryId));\n            state[currentInventoryDeleteIndex].data.splice(action.payload.inventoryModelIndex, 1);\n            return [...state];\n        default:\n            return state;\n    }\n}\n\nexport default inventories;","const initialState = {\n    isShowSideNenuBar: false\n};\n\nconst sideMenuBar = (state = initialState, action) => {\n    switch (action.type) {\n        case \"TOGGLE_SIDEBAR\":\n            return { ...state, isShowSideNenuBar: action.payload };\n        default:\n            return state;\n    }\n}\n\nexport default sideMenuBar;","import { combineReducers } from 'redux';\nimport models from './ModelReducer';\nimport inventories from './InventoryReducers';\nimport sideMenuBar from './SideMenuReducer';\n\nexport default combineReducers({\n    models,\n    inventories,\n    sideMenuBar\n});","import { createStore } from 'redux';\nimport rootReducers from '../redux/reducers/RootReducers';\nimport { loadState, saveState } from '../localStorage';\n\nconst persistedState = loadState();\n\nconst store = createStore(rootReducers, persistedState);\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nexport default store;","export const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}